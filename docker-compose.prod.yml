version: "3.8"

# Production Docker Compose Configuration
# Assumes images have been built using multi-stage Dockerfiles
# Environment variables (especially secrets) should be injected by the deployment environment (e.g., AWS ECS Task Definition)

services:
    frontend:
        build:
            context: ./frontend
            dockerfile: Dockerfile
            args:
                # Pass the Google Client ID during build
                REACT_APP_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
        image: your-docker-registry/ai-secretary-frontend:latest # Specify your production image name/tag
        # No volumes needed for production
        # Ports are exposed by Dockerfile (80), mapping handled by Load Balancer
        restart: always

    backend:
        build:
            context: ./backend
            dockerfile: Dockerfile
        image: your-docker-registry/ai-secretary-backend:latest # Specify your production image name/tag
        # No volumes needed for production
        env_file:
            # Use .env.prod as a base, but prefer injected environment variables
            - ./backend/.env.prod
        environment:
            # Example: Override APP_ENV if not set in .env.prod or via injection
            - APP_ENV=prod
            # Injected variables from AWS/Terraform will override env_file values
        # Ports are exposed by Dockerfile (8000), mapping handled by Load Balancer
        restart: always
        # No depends_on for external database
# Production typically doesn't define networks/volumes managed by compose
# These are usually handled by the cloud infrastructure (VPC, EFS, RDS, etc.)
